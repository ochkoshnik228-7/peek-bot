import os
import requests
import sqlite3
from datetime import datetime, timedelta
from flask import Flask, request
import telebot

BOT_TOKEN = "8314578862:AAFmgkZTLNaPFQCiDiqCZtUNeTxWK3MghFA"
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# Подключение к БД
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, balance REAL)")
cursor.execute("CREATE TABLE IF NOT EXISTS bets (user_id INTEGER, match_id TEXT, team TEXT, amount REAL, coef REAL)")
conn.commit()

# Список предстоящих матчей
def get_upcoming_matches():
    url = "https://hltv-api.vercel.app/api/matches"
    r = requests.get(url)
    matches = r.json()
    now = datetime.utcnow()
    upcoming = []
    for m in matches:
        if m.get("event", {}).get("name") and "counter" in m.get("game", "").lower():
            match_time = datetime.fromisoformat(m["date"].replace("Z", "+00:00"))
            if now <= match_time <= now + timedelta(days=7):
                upcoming.append(m)
    return upcoming

# /start
@bot.message_handler(commands=["start"])
def start(msg):
    user_id = msg.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        cursor.execute("INSERT INTO users VALUES (?, ?)", (user_id, 10000))
        conn.commit()
        bot.send_message(user_id, "Добро пожаловать! На ваш счёт зачислено 10000 Peek.")
    else:
        bot.send_message(user_id, "С возвращением!")
    bot.send_message(user_id, "Доступные команды:\n/start\n/balance\n/matches\n/help")

# /balance
@bot.message_handler(commands=["balance"])
def balance(msg):
    user_id = msg.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        bot.send_message(user_id, f"Ваш баланс: {row[0]} Peek")
    else:
        bot.send_message(user_id, "Вы ещё не зарегистрированы. Напишите /start.")

# /help
@bot.message_handler(commands=["help"])
def help_cmd(msg):
    bot.send_message(msg.chat.id, "Команды:\n/matches — список матчей\n/balance — баланс\nПосле выбора матча выберите команду и укажите ставку.")

# /matches
@bot.message_handler(commands=["matches"])
def matches_cmd(msg):
    matches = get_upcoming_matches()
    if not matches:
        bot.send_message(msg.chat.id, "Нет предстоящих матчей по CS в течение недели.")
        return
    text = "Выберите матч, отправив его номер:\n"
    for i, m in enumerate(matches):
        text += f"{i+1}. {m['team1']['name']} vs {m['team2']['name']}\n"
    bot.send_message(msg.chat.id, text)
    bot.register_next_step_handler(msg, lambda m: choose_match(m, matches))

# Выбор матча
def choose_match(msg, matches):
    try:
        idx = int(msg.text) - 1
        match = matches[idx]
    except:
        bot.send_message(msg.chat.id, "Неверный выбор.")
        return
    text = f"{match['team1']['name']} ({match['odds']['team1']}) / {match['team2']['name']} ({match['odds']['team2']})\nВыберите команду (1 или 2):"
    bot.register_next_step_handler(msg, lambda m: choose_team(m, match))

# Выбор команды
def choose_team(msg, match):
    if msg.text not in ["1", "2"]:
        bot.send_message(msg.chat.id, "Введите 1 или 2.")
        return
    team = match["team1"]["name"] if msg.text == "1" else match["team2"]["name"]
    coef = match["odds"]["team1"] if msg.text == "1" else match["odds"]["team2"]
    bot.send_message(msg.chat.id, f"Введите сумму ставки на {team}:")
    bot.register_next_step_handler(msg, lambda m: place_bet(m, match, team, coef))

# Ставка
def place_bet(msg, match, team, coef):
    user_id = msg.from_user.id
    try:
        amount = float(msg.text)
    except:
        bot.send_message(user_id, "Введите число.")
        return
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    bal = cursor.fetchone()
    if not bal or bal[0] < amount:
        bot.send_message(user_id, "Недостаточно средств.")
        return
    cursor.execute("UPDATE users SET balance=? WHERE user_id=?", (bal[0] - amount, user_id))
    cursor.execute("INSERT INTO bets VALUES (?, ?, ?, ?, ?)", (user_id, match["id"], team, amount, coef))
    conn.commit()
    bot.send_message(user_id, "Ставка принята!")

# Flask для вебхука
@app.route("/" + BOT_TOKEN, methods=["POST"])
def webhook():
    update = request.stream.read().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "OK", 200

@app.route("/")
def index():
    return "Bot is running!"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url="https://peek-bot.onrender.com/" + BOT_TOKEN)
    app.run(host="0.0.0.0", port=5000)
