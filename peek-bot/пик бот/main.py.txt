# main.py
import os
import logging
import requests
from fastapi import FastAPI, Request
import uvicorn

# <-- ТВОЙ ТОКЕН (как просил) -->
BOT_TOKEN = "8314578862:AAFmgkZTLNaPFQCiDiqCZtUNeTxWK3MghFA"

# WEBHOOK_URL должен быть в окружении Render как: https://<твoй-сервис>.onrender.com
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_FULL = (WEBHOOK_BASE.rstrip("/") + WEBHOOK_PATH) if WEBHOOK_BASE else None

API = f"https://api.telegram.org/bot{BOT_TOKEN}"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("peek-bot-min")

app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok"}

@app.post(WEBHOOK_PATH)
async def telegram_update(request: Request):
    data = await request.json()
    logger.info("Received update: %s", data)
    # simple debug echo for messages
    try:
        if "message" in data and "chat" in data["message"]:
            chat_id = data["message"]["chat"]["id"]
            text = "Бот получил сообщение — рабочий webhook."
            requests.post(f"{API}/sendMessage", json={"chat_id": chat_id, "text": text}, timeout=5)
    except Exception as e:
        logger.exception("Error handling update: %s", e)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    logger.info("Starting app, WEBHOOK_BASE=%s", WEBHOOK_BASE)
    if WEBHOOK_FULL:
        try:
            resp = requests.get(f"{API}/setWebhook", params={"url": WEBHOOK_FULL}, timeout=10)
            logger.info("setWebhook response: %s %s", resp.status_code, resp.text)
        except Exception as e:
            logger.exception("Failed to set webhook: %s", e)
    else:
        logger.warning("WEBHOOK_FULL not configured (WEBHOOK_URL env missing)")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", "8000"))
    uvicorn.run("main:app", host="0.0.0.0", port=port, log_level="info")
